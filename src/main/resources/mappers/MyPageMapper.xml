<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dev.babsang.megabox.mappers.IMyPageMapper">
    <select id="selectUserByContact" resultType="dev.babsang.megabox.entities.member.UserEntity">
        select email             as email,
               `name`            as `name`,
               birthday          as birthday,
               contact           as contact,
               id                as id
        from mg_member.users
        where contact = #{contact}
    </select>

    <select id="selectBookingById" resultType="dev.babsang.megabox.vos.movie.BookingVo">
        select booking.`index`             as `index`,
               booking.screen_info_index   as screenInfoIndex,
               booking.user_id             as userId,
               booking.seat_index          as seatIndex,
               booking.payment             as payment,
               screenInfo.`index`          as screenInfoIndex,
               screenInfo.movie_index      as movieIndex,
               screenInfo.screen_date      as screenDate,
               screenInfo.mv_start_time    as mvStartTime,
               screenInfo.auditorium_index as auditoriumIndex,
               seat.column_text            as columnText,
               seat.row                    as `row`,
               movie.title                 as title,
               movie.screen_type           as screenType,
               movie.movie_poster          as moviePoster,
               auditorium.text             as auditoriumText,
               auditorium.branch_index     as branchIndex,
               branch.text                 as branchText
        from mg_movie.booking as booking
                 left join mg_movie.screen_info as screenInfo on screenInfo.index = booking.screen_info_index
                 left join mg_movie.seats as seat on seat.index = booking.seat_index
                 left join mg_movie.movies as movie on movie.index = screenInfo.movie_index
                 left join mg_movie.auditoriums as auditorium on auditorium.`index` = screenInfo.auditorium_index
                 left join mg_movie.branches as branch on branch.`index` = auditorium.branch_index
        where user_id = #{userId}
    </select>

    <select id="selectMovieVosById" resultType="dev.babsang.megabox.entities.movie.BookingEntity">
        SELECT `index`           as `index`,
               screen_info_index as screenInfoIndex,
               user_id           as userId,
               seat_index        as seatIndex,
               sum(payment)      as payment
        from mg_movie.booking
        where user_id = #{id}
    </select>

    <update id="updateUser" parameterType="dev.babsang.megabox.entities.member.UserEntity">
        update mg_member.users
        set email    = #{email},
            `name`   = #{name},
            birthday = #{birthday},
            contact  = #{contact},
            id       = #{id},
            `password` = #{password},
            address_postal = #{addressPostal},
            address_primary = #{addressPrimary},
            address_secondary = #{addressSecondary}
        where email = #{email}
        limit 1
    </update>

    <delete id="deleteUser">
        delete
        from mg_member.users
        where email = #{email}
        limit 1
    </delete>

    <delete id="deleteBooking">
        delete
        from mg_movie.booking
        where `screen_info_index` = #{screenInfoIndex}
          and `user_id` = #{userId}
    </delete>




    <select id="selectUserById"
            resultType="dev.babsang.megabox.entities.member.UserEntity">
        SELECT `email`             AS `email`,
               `name`              AS `name`,
               `birthday`          AS `birthday`,
               `contact`           AS `contact`,
               `id`                AS `id`,
               `password`          AS `password`,
               `address_postal`    AS `addressPostal`,
               `address_primary`   AS `addressPrimary`,
               `address_secondary` AS `addressSecondary`,
               `registered_on`     AS `registeredOn`,
               `admin_flag`        AS `adminFlag`
        FROM `mg_member`.`users`
        ORDER BY `registered_on` DESC
    </select>

    <select id="selectUserCount"
            resultType="int">
        SELECT COUNT(0)
        FROM `mg_member`.`users`
        <if test="criterion != null and criterion.equals('name')">
            WHERE REPLACE(`name`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        <if test="criterion != null and criterion.equals('all')">
            WHERE REPLACE(`name`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
            OR REPLACE(`id`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        <if test="criterion != null and criterion.equals('id')">
            WHERE REPLACE(`id`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
    </select>

    <select id="selectUserIdCount"
            resultType="dev.babsang.megabox.entities.member.UserEntity">
        SELECT
        `email` AS `email`,
        `name` AS `name`,
        `birthday` AS `birthday`,
        `contact` AS `contact`,
        `id` AS `id`,
        `password` AS `password`,
        `address_postal` AS `addressPostal`,
        `address_primary` AS `addressPrimary`,
        `address_secondary` AS `addressSecondary`,
        `registered_on` AS `registeredOn`,
        `admin_flag` AS `adminFlag`
        FROM `mg_member`.`users` AS `user`
        <if test="criterion != null and criterion.equals('name')">
            WHERE REPLACE(`user`.`name`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        <if test="criterion != null and criterion.equals('all')">
            WHERE REPLACE(`name`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
            OR REPLACE(`id`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        <if test="criterion != null and criterion.equals('id')">
            WHERE REPLACE(`id`, ' ', '') LIKE CONCAT('%', REPLACE(#{keyword}, ' ', ''), '%')
        </if>
        LIMIT #{limit} OFFSET #{offset}
    </select>

    <delete id="adminDeleteUser">
        delete
        from mg_member.users
        where email = #{email}
    </delete>

    <select id="selectByEmail"
            resultType="dev.babsang.megabox.entities.member.UserEntity">
        SELECT `email`             AS `email`,
               `name`              AS `name`,
               `birthday`          AS `birthday`,
               `contact`           AS `contact`,
               `id`                AS `id`,
               `password`          AS `password`,
               `address_postal`    AS `addressPostal`,
               `address_primary`   AS `addressPrimary`,
               `address_secondary` AS `addressSecondary`,
               `registered_on`     AS `registeredOn`,
               `admin_flag`        AS `adminFlag`
        FROM `mg_member`.`users`
        WHERE BINARY `email` = #{email}
    </select>
</mapper>
